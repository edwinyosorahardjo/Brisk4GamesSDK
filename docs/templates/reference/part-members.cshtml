
@{
    var UnFuckUsage =  new Func<string, string>((string fuckedUsage) => {
        var basic = fuckedUsage.Replace("new(...)", "ctor()");
        return basic;
    });
    var UnFuckSignature =  new Func<string, string>((string fuckedSignature) => {
        if (fuckedSignature.StartsWith("unit ->"))
            return "No parameters";

        var somewhatUnfucked = fuckedSignature.Replace("unit", "void").Replace("(","").Replace(")","");

        var seperatorPoint = somewhatUnfucked.IndexOf("->");
        if (seperatorPoint <= 0)
            return fuckedSignature;

        string[] parts = somewhatUnfucked.Substring(0, seperatorPoint).Split(new char[]{'*'});

        var crap = new List<string>();
        foreach(var part in parts)
        {
            var doucheFSharpOfCourseItsBackwards = part.Split(new char[]{':'});
            if (doucheFSharpOfCourseItsBackwards.Length == 2)
            {
                crap.Add(doucheFSharpOfCourseItsBackwards[1] + " " + doucheFSharpOfCourseItsBackwards[0]);
            }
            else
            {
                crap.Add(part);
            }
        }

        return String.Join(", ", crap.ToArray());
    });
    var UnFuckReturn =  new Func<string, string>((string fuckedSignature) => {
        var somewhatUnfucked = fuckedSignature.Replace("unit", "void").Replace("(","").Replace(")","");
        var seperatorPoint = somewhatUnfucked.IndexOf("->");
        if (seperatorPoint <= 0)
            return fuckedSignature;
        return somewhatUnfucked.Substring(seperatorPoint +2);
    });

    var wtfIsThisShit = new Func<RazorEngine.Compilation.RazorDynamicObject, string>((RazorEngine.Compilation.RazorDynamicObject wtf) => {
        var membs = wtf.GetDynamicMemberNames();
        return String.Join(", ", membs.Select(t=>t));
    });
}

@if (Enumerable.Count(Model.Members) > 0) {
  <h3>@Model.Header</h3>
  <table class="table table-bordered member-list">
    <thead>
      <tr><td>@Model.TableHeader</td><td>Description</td></tr>
    </thead>
    <tbody>
    @foreach (var it in Model.Members)
    {
      <tr>
        <td class="member-name">
          @{ var id = Html.UniqueID().ToString(); }
          <code onmouseout="hideTip(event, '@id', @id)" onmouseover="showTip(event, '@id', @id)">
            @Html.Encode(UnFuckUsage(it.Details.FormatUsage(2)))
          </code> 

          <div class="tip" id="@id">
            <strong>Signature:</strong> <code>@Html.Encode(UnFuckSignature(it.Details.Signature))</code><br />
            <strong>Returns:</strong> <code>@Html.Encode(UnFuckReturn(it.Details.Signature))</code><br />
            @if (!it.Details.Modifiers.IsEmpty) {
              <strong>Modifiers:</strong> @it.Details.FormatModifiers<br />
            }
            @if (!it.Details.TypeArguments.IsEmpty) {
              <strong>Type parameters:</strong> @it.Details.FormatTypeArguments
            }
          </div>
        </td>
        <td class="xmldoc">
          @if (!String.IsNullOrEmpty(it.Details.FormatSourceLocation))
          {
            <a href="@it.Details.FormatSourceLocation" class="github-link">
              <img src="../content/img/github.png" class="normal" />
              <img src="../content/img/github-blue.png" class="hover" />
            </a>
          }
          @it.Comment.FullText
        </td>
      </tr>
    }
    </tbody>
  </table>
}